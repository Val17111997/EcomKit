import { json, redirect } from "@remix-run/node";
import { useActionData, Form, useNavigation, useLoaderData } from "@remix-run/react";
import { Page, Layout, Card, Text, Button, BlockStack } from "@shopify/polaris";
import { TitleBar } from "@shopify/app-bridge-react";
import { authenticate } from "../shopify.server";

export const loader = async ({ request }) => {
  const { session, billing } = await authenticate.admin(request);
  
  // üîç DIAGNOSTIC APPROFONDI
  try {
    console.log("üîç V√©rification compl√®te de l'environnement billing...");
    
    // V√©rifier les abonnements existants
    const { appSubscriptions } = await billing.check();
    console.log("üìã Abonnements existants:", appSubscriptions);
    
    // Informations de debug
    const debugInfo = {
      shop: session.shop,
      environment: process.env.NODE_ENV,
      appUrl: process.env.SHOPIFY_APP_URL,
      hasExistingSubscriptions: appSubscriptions?.length > 0,
      subscriptionDetails: appSubscriptions
    };
    
    return json({ debugInfo });
    
  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error);
    return json({ 
      debugInfo: { 
        shop: session.shop, 
        error: error.message
      } 
    });
  }
};

export const action = async ({ request }) => {
  const { session, billing } = await authenticate.admin(request);
  const formData = await request.formData();
  
  if (formData.get("action") === "subscribe") {
    console.log("üöÄ === D√âBUT CR√âATION ABONNEMENT ===");
    console.log("üè™ Shop:", session.shop);
    console.log("üåç Environment:", process.env.NODE_ENV);
    console.log("üîó App URL:", process.env.SHOPIFY_APP_URL);
    
    try {
      // üîç √âTAPE 1: V√©rifier l'√©tat actuel
      console.log("üìã √âtape 1: V√©rification des abonnements existants...");
      const { appSubscriptions } = await billing.check();
      console.log("üìã Abonnements trouv√©s:", appSubscriptions?.length || 0);
      
      if (appSubscriptions && appSubscriptions.length > 0) {
        console.log("‚ö†Ô∏è Des abonnements existent d√©j√†:", appSubscriptions);
        return json({
          warning: "Un abonnement existe d√©j√†",
          details: "Vous avez d√©j√† un abonnement actif",
          existingSubscriptions: appSubscriptions
        });
      }
      
      // üîç √âTAPE 2: Tentative de cr√©ation avec plus de param√®tres
      console.log("üí≥ √âtape 2: Cr√©ation de l'abonnement...");
      console.log("üéØ Plan demand√©: 'starter'");
      
      const billingRequest = {
        plan: "starter",
        isTest: true, // üö® IMPORTANT: Mode test
        returnUrl: `${process.env.SHOPIFY_APP_URL}/app?shop=${session.shop}`,
      };
      
      console.log("üìù Param√®tres de billing.request:", billingRequest);
      
      const billingCheck = await billing.request(billingRequest);
      
      console.log("‚úÖ Succ√®s! R√©ponse billing:", billingCheck);
      console.log("üîó URL de confirmation:", billingCheck.confirmationUrl);
      
      // Rediriger vers l'URL de confirmation Shopify
      return redirect(billingCheck.confirmationUrl);
      
    } catch (error) {
      console.error("‚ùå === ERREUR D√âTAILL√âE ===");
      console.error("‚ùå Message:", error.message);
      console.error("‚ùå Stack:", error.stack);
      console.error("‚ùå Type:", error.constructor.name);
      
      // Plus de d√©tails sur l'erreur
      let detailedError = error.message;
      if (error.response) {
        console.error("‚ùå Response status:", error.response.status);
        console.error("‚ùå Response data:", error.response.data);
        detailedError += ` (Status: ${error.response.status})`;
      }
      
      return json({ 
        error: "Erreur lors de la cr√©ation de l'abonnement",
        details: detailedError,
        timestamp: new Date().toISOString(),
        shop: session.shop
      });
    }
  }
  
  // Action pour nettoyer les abonnements existants (debug)
  if (formData.get("action") === "cleanup") {
    try {
      const { appSubscriptions } = await billing.check();
      console.log("üßπ Nettoyage - Abonnements trouv√©s:", appSubscriptions);
      
      return json({
        cleanup: true,
        found: appSubscriptions?.length || 0,
        subscriptions: appSubscriptions
      });
    } catch (error) {
      return json({
        error: "Erreur lors du nettoyage",
        details: error.message
      });
    }
  }
  
  return json({ success: true });
};

export default function PlansPage() {
  const { debugInfo } = useLoaderData();
  const actionData = useActionData();
  const navigation = useNavigation();
  
  const isSubscribing = navigation.formData?.get("action") === "subscribe";
  const isCleaning = navigation.formData?.get("action") === "cleanup";

  return (
    <Page>
      <TitleBar title="Plans & Facturation - DEBUG" />
      <Layout>
        <Layout.Section>
          
          {/* INFORMATIONS DE DEBUG */}
          <Card sectioned>
            <BlockStack gap="300">
              <Text variant="headingSm" tone="critical">
                üîç INFORMATIONS DE DEBUG
              </Text>
              <Text variant="bodyMd">Shop: {debugInfo.shop}</Text>
              <Text variant="bodyMd">Environment: {debugInfo.environment || 'undefined'}</Text>
              <Text variant="bodyMd">App URL: {debugInfo.appUrl || 'undefined'}</Text>
              <Text variant="bodyMd">
                Abonnements existants: {debugInfo.hasExistingSubscriptions ? '‚úÖ OUI' : '‚ùå NON'}
              </Text>
              {debugInfo.subscriptionDetails && (
                <Text variant="bodyMd">
                  D√©tails: {JSON.stringify(debugInfo.subscriptionDetails, null, 2)}
                </Text>
              )}
            </BlockStack>
          </Card>

          <Card sectioned>
            <BlockStack gap="400">
              <Text variant="headingMd" as="h2">
                üíº Starter Plan - 19,90$/mois
              </Text>
              
              <Text variant="bodyMd">
                ‚ú® 14 jours d'essai gratuit puis 19,90$/mois
              </Text>
              
              {/* R√âSULTATS DES ACTIONS */}
              {actionData?.error && (
                <Card>
                  <BlockStack gap="200">
                    <Text variant="headingSm" tone="critical">‚ùå ERREUR D√âTAILL√âE</Text>
                    <Text variant="bodyMd" tone="critical">{actionData.error}</Text>
                    <Text variant="bodyMd">D√©tails: {actionData.details}</Text>
                    <Text variant="bodyMd">Timestamp: {actionData.timestamp}</Text>
                    <Text variant="bodyMd">Shop: {actionData.shop}</Text>
                  </BlockStack>
                </Card>
              )}
              
              {actionData?.warning && (
                <Card>
                  <BlockStack gap="200">
                    <Text variant="headingSm" tone="warning">‚ö†Ô∏è AVERTISSEMENT</Text>
                    <Text variant="bodyMd">{actionData.warning}</Text>
                    <Text variant="bodyMd">{actionData.details}</Text>
                    <Text variant="bodyMd">
                      Abonnements: {JSON.stringify(actionData.existingSubscriptions, null, 2)}
                    </Text>
                  </BlockStack>
                </Card>
              )}
              
              {actionData?.cleanup && (
                <Card>
                  <BlockStack gap="200">
                    <Text variant="headingSm" tone="success">üßπ NETTOYAGE</Text>
                    <Text variant="bodyMd">Abonnements trouv√©s: {actionData.found}</Text>
                    <Text variant="bodyMd">
                      D√©tails: {JSON.stringify(actionData.subscriptions, null, 2)}
                    </Text>
                  </BlockStack>
                </Card>
              )}
              
              {/* BOUTONS D'ACTION */}
              <BlockStack gap="300">
                <Form method="post">
                  <input type="hidden" name="action" value="subscribe" />
                  <Button 
                    variant="primary"
                    size="large"
                    loading={isSubscribing}
                    submit
                    fullWidth
                  >
                    {isSubscribing ? "‚è≥ Cr√©ation en cours..." : "üéØ Cr√©er abonnement (mode debug)"}
                  </Button>
                </Form>
                
                <Form method="post">
                  <input type="hidden" name="action" value="cleanup" />
                  <Button 
                    variant="secondary"
                    size="medium"
                    loading={isCleaning}
                    submit
                    fullWidth
                  >
                    {isCleaning ? "üßπ V√©rification..." : "üîç V√©rifier abonnements existants"}
                  </Button>
                </Form>
              </BlockStack>
              
              <Text variant="bodySm" tone="subdued">
                Version debug avec logs complets dans la console serveur
              </Text>
            </BlockStack>
          </Card>
        </Layout.Section>
      </Layout>
    </Page>
  );
}